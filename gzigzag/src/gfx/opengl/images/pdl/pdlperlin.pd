pp_addhdr('
#include "perlin.c"
');

$args3 = 'float args[3]; args[0] = $x(); args[1] = $y();  args[2] = $z();';
$args2 = 'float args[2]; args[0] = $x(); args[1] = $y();  ';

pp_def('noise_1_2',
    Pars => 'x(); y(); [o]n();',
    Code => $args2 . '
		$n() = noise2(args);'
);

pp_def('noise_1_3',
    Pars => 'x(); y(); z(); [o]n();',
    Code => $args3 . '
		$n() = noise3(args);'
);

pp_def('noise_2_2',
    Pars => 'x(); y(); [o]n(); [o]m();',
    Code => 'float args[3]; args[0] = $x(); args[1] = $y();  
		$n() = noise2(args);
		args[0] += 50.3;
		args[1] += 30.9;
		$m() = noise2(args);
		'
);

pp_def('noise_3_3',
    Pars => 'x(); y(); z(); [o]n(); [o]m(); [o]u();',
    Code => 'float args[3]; args[0] = $x(); args[1] = $y();  args[2] = $z();
		$n() = noise3(args);
		args[0] += 50.3;
		args[2] += 30.9;
		$m() = noise3(args);
		args[1] += 28.7;
		args[0] += 23.2;
		$u() = noise3(args);
		'
);

pp_def('noise_3v_3v',
    Pars => 'x(tri = 3); [o]n(tri);',
    Code => 'float args[3]; 
	    args[0] = $x(tri => 0); 
	    args[1] = $x(tri => 1); 
	    args[2] = $x(tri => 2); 
	    $n(tri => 0) = noise2(args);
	    args[0] += 38;
	    args[1] += 29;
	    args[2] += 15;
	    $n(tri => 1) = noise2(args);
	    args[0] += 33;
	    args[1] += 13;
	    args[2] += 48;
	    $n(tri => 2) = noise2(args);
		'
);

pp_def('cellnoise_1_3',
    Pars => 'x(); y(); z(); [o]n();',
    Code => 'float args[3]; args[0] = $x(); args[1] = $y();  args[2] = $z();
		$n() = cellnoise3(args);'
);

pp_def('turbulence_1_3',
    Pars => 'x(); y(); z(); [o]n();',
    OtherPars => 'float freq',
    Code => $args3 . '$n() = turbulence(args, $COMP(freq)); '
);

pp_def('fBm_1_3',
    Pars => 'x(); y(); z(); lacu(); gain(); [o]n();',
    OtherPars => 'int octaves;',
    Code => $args3 . '$n() = fBm(args, $COMP(octaves), $lacu(), $gain()); '
);

pp_def('faBm_1_3',
    Pars => 'x(); y(); z(); lacu(); gain(); [o]n();',
    OtherPars => 'int octaves;',
    Code => $args3 . '$n() = faBm(args, $COMP(octaves), $lacu(), $gain()); '
);

pp_def('voronoise_3',
    Pars => 'x(); y(); z(); [o]di(); [o]dt(); [o]posi(tri = 3); [o]post(tri);',
    OtherPars => 'float jitter;',
    Code => $args3 . '
    {
	float out[8];
	voronoise3(args, $COMP(jitter), out, out + 3, out + 6);
	$posi(tri => 0) = out[0];
	$posi(tri => 1) = out[1];
	$posi(tri => 2) = out[2];
	$post(tri => 0) = out[3];
	$post(tri => 1) = out[4];
	$post(tri => 2) = out[5];
	$di() = out[6];
	$dt() = out[7];
	}
    '
);

pp_def('voronoise_3_spot',
    Pars => 'x(); y(); z(); [o]di(); ',
    OtherPars => 'float jitter; float maxdist;',
    Code => $args3 . '
    {
	$di() = voronoise3_spot(args, $COMP(jitter), $COMP(maxdist));
	}
    '
);

pp_def('smoothstep',
    Pars => 'low(); high(); x(); [o]y();',
    Code => '
	$y() = smoothstep($low(), $high(), $x());
    '
    );

pp_def('dx',
    Pars => 'v(x, y); [o]d(x, y);',
    Code => '
	    int x_size = $SIZE(x);
	    int end = x_size-1;
	    int i;
	    loop(y) %{ 
		$d(x=>0) = 0;
		for(i=1; i<end; i++) {
		    int im1 = i-1;
		    int ip1 = i+1;
		    $d(x => i) = ($v(x=>ip1)-$v(x=>im1)) / 2;
		}
		$d(x=>end) = 0;
	    %}
	    '
);

pp_addpm('
sub dy { return dx($_[0]->xchg(0,1))->xchg(0,1); }

sub spots_1_3 {
    my($x, $y, $z, $irad, $orad) = @_;
    my $d = voronoise_3_spot($x, $y, $z, 1, $orad);
    return 1-smoothstep($irad, $orad, $d);
}

');
pp_add_exported('', 'dy spots_1_3');

pp_done();
