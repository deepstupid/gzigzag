/*
GIDSpace.java
 *
 *    Copyright (c) 2001 by Benja Fallenstein
 *
 *    You may use and distribute under the terms of either the GNU Lesser
 *    General Public License, either version 2 of the license or,
 *    at your choice, any later version. Alternatively, you may use and
 *    distribute under the terms of the XPL.
 *
 *    See the LICENSE.lgpl and LICENSE.xpl files for the specific terms of 
 *    the licenses.
 *
 *    This software is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the README
 *    file for more details.
 *
 */
/*
 * Written by Benja Fallenstein
 */

package org.gzigzag.impl;
import org.gzigzag.*;
import org.gzigzag.mediaserver.Mediaserver;
import java.util.*;

/** Mixin for spaces supporting our implementation's global ID scheme.
 *  Currently, in addition to Space, this provides a method getDim(String)
 *  which returns a Dim given the globally unique ID of that dimension.
 * <p>
 *  This way, we don't need obtain a Cell in order to refer to a dimension;
 *  the global ID of the dimension will do.
 * <p>
 * Because the global ids are really global as well as stable, this 
 * seems like a reasonable approach.
 * <p>
 * This is necessary since dimensions are global, as seen in the 
 * image.
 * <br><img src="../../../../doc-images/sliceinclusion-dimsame.jpg"><br>
 */
public interface GIDSpace extends Space {
String rcsid = "$Id: GIDSpace.java,v 1.9 2001/08/18 15:03:29 bfallenstein Exp $";
    /** Get the Id of the last save of this space.
     *  <code>null</code> if this space has never been saved before.
     *  Necessary for saving included spaces, because we need to know their
     *  (possibly fake) Mediaserver ID.
     */
    Mediaserver.Id getLastId();

    /** Transcopy a cell from a different space.
     *  Currently we can only transcopy a single cell at a time.
     *  @returns The transcopied cell, in this space.
     */
    Cell transcopy(Cell from);

    /** Return a mapping from cells to real dimensions.
     *  Real dimensions are those whose connections are actually stored
     *  in the file format, not auto-generated by the computer.
     *  <pre>
     *  &lt;tjl_&gt; that's why I'd like some call to get the human stuff from Space
     *  &lt;benja&gt; uh?
     *  &lt;benja&gt; "get the human stuff from Space?"
     *  &lt;tjl_&gt; yes, the cells that are actually human-edited
     *  &lt;tjl_&gt; nothing generated
     *  &lt;tjl_&gt; no spaceparts
     *  &lt;benja&gt; ah!
     *  &lt;benja&gt; sure
     *  &lt;benja&gt; I thought you meant,
     *  &lt;benja&gt; stuff like d.cursor
     *  &lt;benja&gt; which has a meaning to the computer
     *  &lt;benja&gt; and is written by the computer
     *  &lt;benja&gt; but an ordinary ZZ dim
     *  &lt;tjl_&gt; but how?
     *  &lt;tjl_&gt; someone here want to implement that? ;)
     *  &lt;benja&gt; sure
     *  &lt;benja&gt; moment
     *  &lt;benja&gt; (what should it be called?)
     *  &lt;benja&gt; (& should it be in Space, or an impl/ interfacee?)
     *  &lt;benja&gt; I have thought about this before, because I need it for transcopy, too
     *  &lt;benja&gt; I think putting it in impl/ would make more sense for now...
     *  &lt;benja&gt; then not all spaces have to support it
     *  &lt;benja&gt; hmm
     *  &lt;benja&gt; anyway, it can be moved
     *  &lt;benja&gt; so what should the name be?
     *  &lt;tjl_&gt; hmm
     *  &lt;tjl_&gt; getNongeneratedSpace?
     *  &lt;tjl_&gt; hmm
     *  &lt;benja&gt; not Space?
     *  &lt;benja&gt; Dims?
     *  &lt;benja&gt; getRealDims?
     *  &lt;tjl_&gt; oh, but some dimensions may be half generated, half real
     *  &lt;benja&gt; so? getRealDims ought to return the real part, I guess
     *  &lt;tjl_&gt; but ok, returning a map of Cell -&gt; Dim
     *  &lt;tjl_&gt; yes
     *  &lt;tjl_&gt; fine
     *  </pre>
     */
    Map getRealDims();
}
