/*   
TestServerHTTPResponse.java
 *    
 *    You may use and distribute under the terms of either the GNU Lesser
 *    General Public License, either version 2 of the license or,
 *    at your choice, any later version. Alternatively, you may use and
 *    distribute under the terms of the XPL.
 *
 *    See the LICENSE.lgpl and LICENSE.xpl files for the specific terms of 
 *    the licenses.
 *
 *    This software is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the README
 *    file for more details.
 *
 */
/*
 * Written by Antti-Juhani Kaijanaho
 */

package org.gzigzag.mediaserver.http.server;
import org.gzigzag.util.*;
import java.io.*;
import junit.framework.*;

public class TestServerHTTPResponse extends ZZTestCase {
public static final String rcsid = "$Id: TestServerHTTPResponse.java,v 1.6 2001/07/30 09:18:52 ajk Exp $";
    static public boolean dbg = false;
    static private void p(String s) { if(dbg) System.out.println(s); }

    public TestServerHTTPResponse(String name) { super(name); }

    // Test that we don't get the body before the head.
    public void testTextWriterOrdering() throws IOException {
        byte[] res = {
            0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x20, 0x32,
            0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, 0x0a, 0x54, 0x72, 0x61,
            0x6e, 0x73, 0x66, 0x65, 0x72, 0x2d, 0x45, 0x6e, 0x63, 0x6f,
            0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x63, 0x68, 0x75, 0x6e,
            0x6b, 0x65, 0x64, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65,
            0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x74,
            0x65, 0x78, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x3b,
            0x20, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x3d, 0x55, 
            0x54, 0x46, 0x2d, 0x38, 0x0d, 0x0a, 0x0d, 0x0a, 0x33, 0x0d, 
            0x0a, 0x42, 0x61, 0x72, 0x0d, 0x0a, 0x30, 0x0d, 0x0a, 0x0d,
            0x0a
        };
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        HTTPResponse r = new HTTPResponse(baos, true, 200, "OK");
        Writer w = new BufferedWriter(r.getWriter("plain"));
        w.write("Bar");
        w.flush();
        r.commit();
        r.close();
        p("###\n" + baos + "###");
        assertEquals(res, baos.toByteArray());
     }

    public void testHeaderFormatting() throws IOException {
        byte[] res = {
            0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31,
            0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, 
            0x0a, 
            0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
            0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
            0x67, 0x3a, 0x20, 0x63, 0x68, 0x75, 0x6e, 0x6b,
            0x65, 0x64, 0x0d, 0x0a, 
0x42, 0x61, 0x7a, 0x3a, 0x20,
            0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 0x71,
            0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 0x71, 0x77,
            0x65, 0x72, 0x74, 0x79, 0x20, 0x71, 0x77, 0x65,
            0x72, 0x74, 0x79, 0x20, 0x71, 0x77, 0x65, 0x72,
            0x74, 0x79, 0x20, 0x71, 0x77, 0x65, 0x72, 0x74,
            0x79, 0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 
            0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x20,
            0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 0x71,
            0x77, 0x65, 0x72, 0x74, 0x79, 0x0d, 0x0a, 0x20,
            0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 0x71,
            0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 0x71, 0x77,
            0x65, 0x72, 0x74, 0x79, 0x20, 0x71, 0x77, 0x65,
            0x72, 0x74, 0x79, 0x20, 0x71, 0x77, 0x65, 0x72,
            0x74, 0x79, 0x20, 0x71, 0x77, 0x65, 0x72, 0x74,
            0x79, 0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79,
            0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x20,
            0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 0x71,
            0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 0x71, 0x77,
            0x65, 0x72, 0x74, 0x79, 0x0d, 0x0a, 0x20, 0x71,
            0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 0x71, 0x77,
            0x65, 0x72, 0x74, 0x79, 0x20, 0x71, 0x77, 0x65,
            0x72, 0x74, 0x79, 0x20, 0x71, 0x77, 0x65, 0x72,
            0x74, 0x79, 0x20, 0x71, 0x77, 0x65, 0x72, 0x74,
            0x79, 0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79,
            0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 
            0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x0d, 0x0a,
           0x0d, 0x0a, 0x31, 0x0d,
            0x0a, 0x21, 0x0d, 0x0a, 0x30, 0x0d, 0x0a, 0x0d,
            0x0a
        };
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        HTTPResponse r = new HTTPResponse(baos, true, 200, "OK");
        r.setField("Baz", "qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty qwerty");
        r.commit();
        OutputStream os = r.getOutputStream();
        os.write('!');
        r.close();
        p("###\n" + baos + "###");
        assertEquals(res, baos.toByteArray());
    }        
}
