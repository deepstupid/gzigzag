/*   
TestServerHTTPRequest.java
 *    
 *    You may use and distribute under the terms of either the GNU Lesser
 *    General Public License, either version 2 of the license or,
 *    at your choice, any later version. Alternatively, you may use and
 *    distribute under the terms of the XPL.
 *
 *    See the LICENSE.lgpl and LICENSE.xpl files for the specific terms of 
 *    the licenses.
 *
 *    This software is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the README
 *    file for more details.
 *
 */
/*
 * Written by Antti-Juhani Kaijanaho
 */

package org.gzigzag.mediaserver.http.server;
import org.gzigzag.util.*;
import java.util.*;
import java.io.*;
import junit.framework.*;

public class TestServerHTTPRequest extends ZZTestCase {
public static final String rcsid = "$Id: TestServerHTTPRequest.java,v 1.3 2001/07/27 07:27:07 ajk Exp $";
    static public boolean dbg = false;
    static private void p(String s) { if(dbg) System.out.println(s); }

    public TestServerHTTPRequest(String name) { super(name); }

    public void testMultipleChunkParsing() throws Exception {
        byte[] reqd = { 
            0x47, 0x45, 0x54, 0x20, 0x2f, 0x20, 0x48, 0x54, 0x54, 0x50,
            0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a, 0x48, 0x6f, 0x73, 0x74, 
            0x3a, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 
            0x74, 0x0d, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 
            0x72, 0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 
            0x3a, 0x20, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x0d, 
            0x0a, 0x0d, 0x0a, 0x31, 0x0d, 0x0a, 0x61, 0x0d, 0x0a, 0x31, 
            0x0d, 0x0a, 0x62, 0x0d, 0x0a, 0x30, 0x0d, 0x0a, 0x0d, 0x0a
        };
        if (dbg) System.out.write(reqd);
        HTTPRequest req = new HTTPRequest(new ByteArrayInputStream(reqd));
        InputStream is = req.getInputStream();
        byte[] ba = new byte[65536];
        int n = 0;
        while (true) {
            int read = is.read(ba, n, ba.length - n);
            if (read == -1) break;
            n += read;
        }
        String s = new String(ba, 0, n);
        assertEquals("ab", s);
    }

    public void testRequest() throws Exception {
        byte[] reqd = new byte[] {
            0x47, 0x45, 0x54, 0x20, 0x2f, 0x20, 0x48, 0x54, 0x54,
            0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a, 0x46, 0x6f,
            0x6f, 0x3a, 0x20, 0x42, 0x61, 0x72, 0x0d, 0x0a, 0x48,
            0x6f, 0x73, 0x74, 0x3a, 0x20, 0x6c, 0x6f, 0x63, 0x61,
            0x6c, 0x68, 0x6f, 0x73, 0x74, 0x0d, 0x0a, 0x42, 0x61,
            0x7a, 0x3a, 0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79,
            0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 0x71,
            0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 0x71, 0x77, 0x65,
            0x72, 0x74, 0x79, 0x20, 0x71, 0x77, 0x65, 0x72, 0x74,
            0x79, 0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x20,
            0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 0x71, 0x77,
            0x65, 0x72, 0x74, 0x79, 0x20, 0x71, 0x77, 0x65, 0x72,
            0x74, 0x79, 0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 
            0x0d, 0x0a, 0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 
            0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 0x71,
            0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 0x71, 0x77, 0x65,
            0x72, 0x74, 0x79, 0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 
            0x79, 0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 
            0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 0x71, 0x77,
            0x65, 0x72, 0x74, 0x79, 0x20, 0x71, 0x77, 0x65, 0x72,
            0x74, 0x79, 0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 
            0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x0d, 0x0a,
            0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 0x71,
            0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 0x71, 0x77, 0x65,
            0x72, 0x74, 0x79, 0x20, 0x71, 0x77, 0x65, 0x72, 0x74,
            0x79, 0x20, 0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x20,
            0x71, 0x77, 0x65, 0x72, 0x74, 0x79, 0x20, 0x71, 0x77,
            0x65, 0x72, 0x74, 0x79, 0x20, 0x71, 0x77, 0x65, 0x72,
            0x74, 0x79, 0x0d, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73,
            0x66, 0x65, 0x72, 0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64,
            0x69, 0x6e, 0x67, 0x3a, 0x20, 0x63, 0x68, 0x75, 0x6e,
            0x6b, 0x65, 0x64, 0x0d, 0x0a, 0x0d, 0x0a, 0x31, 0x0d, 
            0x0a, 0x21, 0x0d, 0x0a, 0x30, 0x0d, 0x0a, 0x0d, 0x0a
        };
        HTTPRequest req = new HTTPRequest(new ByteArrayInputStream(reqd));
        assertEquals("GET", req.getMethod());
        assertEquals("/", req.getRequestURI());
        assertEquals("HTTP/1.1", req.getHTTPVersion());
        assertEquals("Bar", req.getField("Foo"));
        assertEquals("localhost", req.getField("Host"));
        assertEquals("chunked", req.getField("Transfer-Encoding"));
        assertEquals("qwerty qwerty qwerty qwerty qwerty qwerty "
                     + "qwerty qwerty qwerty qwerty qwerty qwerty "
                     + "qwerty qwerty qwerty qwerty qwerty qwerty "
                     + "qwerty qwerty qwerty qwerty qwerty qwerty "
                     + "qwerty qwerty qwerty qwerty qwerty",
                     req.getField("Baz"));
        InputStream is = req.getInputStream();
        byte[] ba = new byte[65536];
        int n = 0;
        n = is.read(ba);
        if (n == -1) throw new IOException("aargh");
        String s = new String(ba, 0, n);
        assertEquals("!", s);
    }

    
}
